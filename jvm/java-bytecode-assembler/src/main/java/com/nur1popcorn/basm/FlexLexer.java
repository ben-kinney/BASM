/* The following code was generated by JFlex 1.7.0 */

/*
 * Copyright (C) Keanu Poeschko - All Rights Reserved
 * Unauthorized copying of this file is strictly prohibited
 *
 * Created by Keanu Poeschko <nur1popcorn@gmail.com>, August 2017
 * This file is part of {BASM}.
 *
 * Do not copy or distribute files of {BASM} without permission of {Keanu Poeschko}
 *
 * Permission to use, copy, modify, and distribute my software for
 * educational, and research purposes, without a signed licensing agreement
 * and for free, is hereby granted, provided that the above copyright notice
 * and this paragraph appear in all copies, modifications, and distributions.
 *
 * {BASM} is based on this document: https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html
 *
 */

package com.nur1popcorn.basm;

import static com.nur1popcorn.basm.Parser.Lexer.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/nur1popcorn/Desktop/Projects/BASM/jvm/java-bytecode-assembler/src/main/jflex/lexer.flex</tt>
 */
class FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\1\1\2\1\40\1\41\1\2\16\5\4\0\1\1\1\0"+
    "\1\37\1\0\1\4\2\0\1\44\2\0\1\36\3\0\1\6\1\3"+
    "\4\45\4\46\2\50\7\0\6\47\24\4\1\0\1\43\2\0\1\4"+
    "\1\0\1\17\1\26\1\15\1\23\1\22\1\21\1\33\1\24\1\7"+
    "\2\4\1\16\1\10\1\30\1\12\1\11\1\4\1\13\1\20\1\14"+
    "\1\25\1\27\2\4\1\31\1\32\1\34\1\0\1\35\1\0\6\5"+
    "\1\42\32\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4"+
    "\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4\1\0"+
    "\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\236\4\11\0"+
    "\46\4\2\0\1\4\7\0\47\4\7\0\1\4\1\0\55\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4\5\0"+
    "\3\4\15\0\5\5\6\0\1\4\4\0\13\5\5\0\53\4\37\5"+
    "\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4"+
    "\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5"+
    "\1\4\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\5"+
    "\41\4\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5"+
    "\1\4\3\5\1\4\5\5\22\0\31\4\3\5\104\0\1\4\1\0"+
    "\13\4\67\0\33\5\1\0\4\5\66\4\3\5\1\4\22\5\1\4"+
    "\7\5\12\4\2\5\2\0\12\5\1\0\7\4\1\0\7\4\1\0"+
    "\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0"+
    "\3\5\1\4\10\0\1\5\4\0\2\4\1\0\3\4\2\5\2\0"+
    "\12\5\4\4\7\0\1\4\5\0\3\5\1\0\6\4\4\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5"+
    "\7\0\4\4\1\0\1\4\7\0\14\5\3\4\1\5\13\0\3\5"+
    "\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0\3\5"+
    "\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4\17\0"+
    "\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0"+
    "\3\5\10\0\2\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5"+
    "\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\14\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0"+
    "\1\4\6\0\1\5\16\0\12\5\11\0\1\4\7\0\3\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0"+
    "\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\1\0\2\4"+
    "\6\0\2\4\2\5\2\0\12\5\22\0\2\5\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\5\1\4"+
    "\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\4\1\0"+
    "\2\4\2\5\2\0\12\5\1\0\2\4\17\0\2\5\1\0\10\4"+
    "\1\0\3\4\1\0\51\4\2\0\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\1\4\10\0\1\5\10\0\2\4\2\5\2\0\12\5\12\0"+
    "\6\4\2\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0"+
    "\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0"+
    "\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4"+
    "\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5"+
    "\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0"+
    "\12\5\2\0\4\4\40\0\1\4\27\0\2\5\6\0\12\5\13\0"+
    "\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0\44\4"+
    "\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5\11\0\1\5"+
    "\71\0\53\4\24\5\1\4\12\5\6\0\6\4\4\5\4\4\3\5"+
    "\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5\1\4\17\5"+
    "\2\0\46\4\1\0\1\4\5\0\1\4\2\0\53\4\1\0\u014d\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\51\4"+
    "\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0\103\4"+
    "\2\0\3\5\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4"+
    "\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4"+
    "\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0"+
    "\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4"+
    "\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0"+
    "\51\4\1\5\1\4\5\0\106\4\12\0\35\4\3\0\14\5\4\0"+
    "\14\5\12\0\12\5\36\4\2\0\5\4\13\0\54\4\4\0\21\5"+
    "\7\4\2\5\6\0\12\5\46\0\27\4\5\5\4\0\65\4\12\5"+
    "\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\4\130\0\5\5"+
    "\57\4\21\5\7\4\4\0\12\5\21\0\11\5\14\0\3\5\36\4"+
    "\15\5\2\4\12\5\54\4\16\5\14\0\44\4\24\5\10\0\12\5"+
    "\3\0\3\4\12\5\44\4\122\0\3\5\1\0\25\5\4\4\1\5"+
    "\4\4\3\5\2\4\11\0\300\4\47\5\25\0\4\5\u0116\4\2\0"+
    "\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0"+
    "\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0"+
    "\15\4\5\0\3\4\1\0\7\4\16\0\5\5\30\0\1\40\1\40"+
    "\5\5\20\0\2\4\23\0\1\4\13\0\5\5\5\0\6\5\1\0"+
    "\1\4\15\0\1\4\20\0\15\4\3\0\33\4\25\0\15\5\4\0"+
    "\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0"+
    "\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\5"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0"+
    "\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0"+
    "\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0\56\4\2\0"+
    "\u010d\4\3\0\20\4\12\5\2\4\24\0\57\4\1\5\4\0\12\5"+
    "\1\0\31\4\7\0\1\5\120\4\2\5\45\0\11\4\2\0\147\4"+
    "\2\0\4\4\1\0\4\4\14\0\13\4\115\0\12\4\1\5\3\4"+
    "\1\5\4\4\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0"+
    "\2\5\62\4\21\5\13\0\12\5\6\0\22\5\6\4\3\0\1\4"+
    "\4\0\12\5\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0"+
    "\4\5\57\4\16\5\16\0\1\4\12\5\46\0\51\4\16\5\11\0"+
    "\3\4\1\5\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4"+
    "\1\5\4\0\60\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5"+
    "\1\4\1\5\1\4\30\0\3\4\2\0\13\4\5\5\2\0\3\4"+
    "\2\5\12\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\221\0\43\4\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\7\5"+
    "\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4"+
    "\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4"+
    "\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0\14\4"+
    "\1\0\32\4\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4"+
    "\42\0\173\4\105\0\65\4\210\0\1\5\202\0\35\4\3\0\61\4"+
    "\57\0\37\4\21\0\33\4\65\0\36\4\2\0\44\4\4\0\10\4"+
    "\1\0\5\4\52\0\236\4\2\0\12\5\u0356\0\6\4\2\0\1\4"+
    "\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4\252\0\26\4"+
    "\12\0\32\4\106\0\70\4\6\0\2\4\100\0\1\4\3\5\1\0"+
    "\2\5\5\0\4\5\4\4\1\0\3\4\1\0\33\4\4\0\3\5"+
    "\4\0\1\5\40\0\35\4\203\0\66\4\12\0\26\4\12\0\23\4"+
    "\215\0\111\4\u03b7\0\3\5\65\4\17\5\37\0\12\5\20\0\3\5"+
    "\55\4\13\5\2\0\1\5\22\0\31\4\7\0\12\5\6\0\3\5"+
    "\44\4\16\5\1\0\12\5\100\0\3\5\60\4\16\5\4\4\13\0"+
    "\12\5\u04a6\0\53\4\15\5\10\0\12\5\u0936\0\u036f\4\221\0\143\4"+
    "\u0b9d\0\u042f\4\u33d1\0\u0239\4\u04c7\0\105\4\13\0\1\4\56\5\20\0"+
    "\4\5\15\4\u4060\0\2\4\u2163\0\5\5\3\0\26\5\2\0\7\5"+
    "\36\0\4\5\224\0\3\5\u01bb\0\125\4\1\0\107\4\1\0\2\4"+
    "\2\0\1\4\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4"+
    "\1\0\7\4\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4"+
    "\1\0\34\4\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4"+
    "\1\0\u0154\4\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\10\4\2\0\62\5\u1600\0\4\4\1\0\33\4"+
    "\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12\4\1\0\4\4"+
    "\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1\4\2\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\1\0\1\4\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4"+
    "\1\0\1\4\1\0\12\4\1\0\21\4\5\0\3\4\1\0\5\4"+
    "\1\0\21\4\u1144\0\ua6d7\4\51\0\u1035\4\13\0\336\4\u3fe2\0\u021e\4"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\1\13\3\1\4"+
    "\1\5\1\6\1\2\1\7\1\10\1\11\1\12\1\2"+
    "\1\13\4\0\20\3\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\4\0\22\3"+
    "\1\26\1\25\4\0\16\3\1\27\4\3\1\26\4\0"+
    "\12\3\1\30\2\3\1\31\4\3\1\26\2\0\1\32"+
    "\1\33\4\3\1\34\3\3\1\35\1\36\2\3\1\37"+
    "\2\3\1\40\1\26\1\41\1\42\2\3\1\43\7\3"+
    "\1\44\1\3\1\45\2\3\1\46\3\3\1\47\1\50"+
    "\1\51\1\52\1\3\1\53\1\3\1\54\2\3\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\173\0\173\0\173\0\u02e2\0\173"+
    "\0\173\0\173\0\u030b\0\u0334\0\173\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\173\0\173\0\173\0\173\0\u0691\0\173\0\173"+
    "\0\173\0\173\0\173\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e"+
    "\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6"+
    "\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee"+
    "\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\173\0\u0abb\0\u0ae4\0\u0b0d"+
    "\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\315"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004"+
    "\0\u102d\0\u1056\0\u107f\0\315\0\u10a8\0\u10d1\0\315\0\u10fa"+
    "\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\173\0\173"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\315\0\u12bd\0\u12e6\0\u130f"+
    "\0\315\0\315\0\u1338\0\u1361\0\315\0\u138a\0\u13b3\0\315"+
    "\0\173\0\173\0\173\0\u13dc\0\u1405\0\315\0\u142e\0\u1457"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\315\0\u154d\0\315"+
    "\0\u1576\0\u159f\0\315\0\u15c8\0\u15f1\0\u161a\0\315\0\315"+
    "\0\315\0\315\0\u1643\0\315\0\u166c\0\315\0\u1695\0\u16be"+
    "\0\315";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\13\2\7\1\14\2\7\1\15\1\16\1\17\1\20"+
    "\3\7\1\21\1\22\1\23\3\7\1\24\1\25\1\4"+
    "\1\26\1\4\1\5\5\4\1\7\1\4\2\5\1\0"+
    "\33\5\1\27\1\5\3\0\6\5\2\30\1\31\34\30"+
    "\1\32\3\0\1\33\5\30\54\0\1\34\32\0\1\35"+
    "\16\0\2\7\1\0\25\7\6\0\1\7\2\0\4\7"+
    "\7\0\1\36\1\37\4\0\1\40\3\0\1\41\33\0"+
    "\2\7\1\0\21\7\1\42\3\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\10\7\1\43\14\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\4\7\1\44"+
    "\11\7\1\45\6\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\4\7\1\46\20\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\17\7\1\47\1\7\1\50"+
    "\3\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\5\7\1\51\10\7\1\52\3\7\1\53\2\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\1\54\24\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\21\7"+
    "\1\55\3\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\4\7\1\56\20\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\3\7\1\57\4\7\1\60\14\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\10\7"+
    "\1\61\14\7\6\0\1\7\2\0\4\7\3\0\1\62"+
    "\60\0\1\63\1\64\4\0\1\65\3\0\1\66\1\67"+
    "\1\0\1\70\6\0\1\71\3\0\1\72\1\73\1\74"+
    "\1\75\2\0\51\34\10\0\1\76\62\0\1\77\44\0"+
    "\1\100\41\0\1\101\45\0\2\7\1\0\5\7\1\102"+
    "\17\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\21\7\1\103\3\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\1\104\2\7\1\105\21\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\17\7\1\106\5\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\10\7"+
    "\1\107\14\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\11\7\1\110\13\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\21\7\1\111\3\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\4\7\1\112\3\7"+
    "\1\113\14\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\2\7\1\114\22\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\21\7\1\115\3\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\21\7\1\116\3\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\16\7"+
    "\1\117\6\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\1\120\24\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\7\7\1\121\15\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\4\7\1\122\20\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\5\7\1\123"+
    "\17\7\6\0\1\7\2\0\4\7\15\0\1\124\1\0"+
    "\1\124\1\0\3\124\1\0\1\66\1\124\16\0\4\124"+
    "\45\0\2\75\47\0\2\125\13\0\1\126\53\0\1\127"+
    "\53\0\1\130\53\0\1\131\32\0\2\7\1\0\13\7"+
    "\1\132\11\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\14\7\1\133\10\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\20\7\1\134\4\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\5\7\1\135\17\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\7\7"+
    "\1\136\15\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\21\7\1\137\3\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\5\7\1\140\17\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\3\7\1\141\21\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\1\142"+
    "\24\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\5\7\1\143\17\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\13\7\1\144\11\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\5\7\1\145\1\146\16\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\10\7"+
    "\1\147\14\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\1\7\1\150\23\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\14\7\1\151\10\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\10\7\1\152\14\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\10\7"+
    "\1\153\14\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\1\154\24\7\6\0\1\7\2\0\4\7\15\0"+
    "\1\155\1\0\1\155\1\0\3\155\2\0\1\155\16\0"+
    "\4\155\12\0\1\156\62\0\1\157\44\0\1\160\46\0"+
    "\1\161\36\0\2\7\1\0\4\7\1\162\20\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\10\7\1\163"+
    "\14\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\10\7\1\164\14\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\13\7\1\165\11\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\1\166\24\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\11\7\1\167\13\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\4\7"+
    "\1\170\20\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\5\7\1\171\17\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\6\7\1\172\16\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\1\173\24\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\4\7\1\174"+
    "\20\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\15\7\1\175\7\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\15\7\1\176\7\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\7\7\1\177\15\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\24\7\1\200"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\5\7"+
    "\1\201\17\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\4\7\1\202\20\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\20\7\1\203\4\7\6\0\1\7"+
    "\2\0\4\7\15\0\1\204\1\0\1\204\1\0\3\204"+
    "\2\0\1\204\16\0\4\204\13\0\1\205\47\0\1\206"+
    "\56\0\1\207\53\0\1\210\31\0\2\7\1\0\12\7"+
    "\1\211\12\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\5\7\1\212\17\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\5\7\1\213\17\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\6\7\1\214\16\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\6\7"+
    "\1\215\16\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\1\216\24\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\10\7\1\217\14\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\10\7\1\220\14\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\5\7\1\221"+
    "\17\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\6\7\1\222\16\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\13\7\1\223\11\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\4\7\1\224\20\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\13\7\1\225"+
    "\11\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\1\226\24\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\24\7\1\227\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\13\7\1\230\11\7\6\0\1\7\2\0"+
    "\4\7\15\0\1\231\1\0\1\231\1\0\3\231\2\0"+
    "\1\231\16\0\4\231\14\0\1\232\57\0\1\233\31\0"+
    "\2\7\1\0\10\7\1\234\14\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\13\7\1\235\11\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\13\7\1\236"+
    "\11\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\5\7\1\237\17\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\13\7\1\240\11\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\6\7\1\241\16\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\5\7\1\242"+
    "\17\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\5\7\1\243\17\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\3\7\1\244\21\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\7\7\1\245\15\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\11\7\1\246"+
    "\13\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\6\7\1\247\16\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\14\7\1\250\10\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\13\7\1\251\11\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\21\7\1\252"+
    "\3\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\5\7\1\253\17\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\1\254\24\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\1\255\24\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\21\7\1\256\3\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\13\7\1\257"+
    "\11\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\13\7\1\260\11\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\14\7\1\261\10\7\6\0\1\7\2\0"+
    "\4\7\4\0\2\7\1\0\5\7\1\262\17\7\6\0"+
    "\1\7\2\0\4\7\4\0\2\7\1\0\3\7\1\263"+
    "\21\7\6\0\1\7\2\0\4\7\4\0\2\7\1\0"+
    "\6\7\1\264\16\7\6\0\1\7\2\0\4\7\4\0"+
    "\2\7\1\0\1\265\24\7\6\0\1\7\2\0\4\7"+
    "\4\0\2\7\1\0\21\7\1\266\3\7\6\0\1\7"+
    "\2\0\4\7\4\0\2\7\1\0\23\7\1\267\1\7"+
    "\6\0\1\7\2\0\4\7\4\0\2\7\1\0\13\7"+
    "\1\270\11\7\6\0\1\7\2\0\4\7\4\0\2\7"+
    "\1\0\14\7\1\271\10\7\6\0\1\7\2\0\4\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5863];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\16\1\3\11\1\1\3\11\2\1\1\11"+
    "\4\0\20\1\4\11\1\0\5\11\2\1\4\0\23\1"+
    "\1\11\4\0\24\1\4\0\23\1\2\0\2\11\20\1"+
    "\3\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private final StringBuilder sb = new StringBuilder();

    private static Yytoken yytoken(int token) {
        return new Yytoken(token);
    }

    private static <T> Yytoken<T> yytoken(int token, T lVal) {
        return new Yytoken<>(token, lVal);
    }

    private static String escape(String str) {
        final StringBuilder sb = new StringBuilder();
        for(int i = 0; i < str.length(); i++) {
            final char c = str.charAt(i);
            switch(c) {
                case '\t': sb.append("\\t"); break;
                case '\b': sb.append("\\b"); break;
                case '\n': sb.append("\\n"); break;
                case '\r': sb.append("\\r"); break;
                case '\f': sb.append("\\f"); break;
                case '\"': sb.append("\\\""); break;
                default: sb.append(c); break;
            }
        }
        return sb.toString();
    }

    private static char parseUnicode(String character) {
        int i = 2;
        while(character.charAt(i) == 'u')
            i++;
        return (char) Integer.parseInt(character.substring(i), 16);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2840) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return yytoken(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character '" + escape(yytext()) + "', at line: " + yyline + ".");
            } 
            // fall through
          case 46: break;
          case 2: 
            { 
            } 
            // fall through
          case 47: break;
          case 3: 
            { return yytoken(IDENTIFIER, yytext());
            } 
            // fall through
          case 48: break;
          case 4: 
            { return yytoken(L_BRACE);
            } 
            // fall through
          case 49: break;
          case 5: 
            { return yytoken(R_BRACE);
            } 
            // fall through
          case 50: break;
          case 6: 
            { sb.setLength(0);
           yybegin(STRING);
            } 
            // fall through
          case 51: break;
          case 7: 
            { sb.append(yytext());
            } 
            // fall through
          case 52: break;
          case 8: 
            { throw new Error("Unexpected line feed at line: " + yyline + ".");
            } 
            // fall through
          case 53: break;
          case 9: 
            { yybegin(YYINITIAL);
           return yytoken(STRING_LIT, sb.toString());
            } 
            // fall through
          case 54: break;
          case 10: 
            { throw new Error("Illegal string character '\\' at line: " + yyline + ".");
            } 
            // fall through
          case 55: break;
          case 11: 
            { yybegin(MULTI_LINE_COMMENT);
            } 
            // fall through
          case 56: break;
          case 12: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 57: break;
          case 13: 
            { sb.append('\r');
            } 
            // fall through
          case 58: break;
          case 14: 
            { sb.append('\t');
            } 
            // fall through
          case 59: break;
          case 15: 
            { sb.append('\f');
            } 
            // fall through
          case 60: break;
          case 16: 
            { sb.append('\b');
            } 
            // fall through
          case 61: break;
          case 17: 
            { sb.append('\n');
            } 
            // fall through
          case 62: break;
          case 18: 
            { sb.append('\"');
            } 
            // fall through
          case 63: break;
          case 19: 
            { sb.append('\\');
            } 
            // fall through
          case 64: break;
          case 20: 
            { sb.append('\'');
            } 
            // fall through
          case 65: break;
          case 21: 
            { sb.append(Integer.parseInt(yytext().substring(1), 8));
            } 
            // fall through
          case 66: break;
          case 22: 
            { sb.append(parseUnicode(yytext()));
            } 
            // fall through
          case 67: break;
          case 23: 
            { return yytoken(ENUM);
            } 
            // fall through
          case 68: break;
          case 24: 
            { return yytoken(SUPER);
            } 
            // fall through
          case 69: break;
          case 25: 
            { return yytoken(FINAL);
            } 
            // fall through
          case 70: break;
          case 26: 
            { return yytoken(CLASS);
            } 
            // fall through
          case 71: break;
          case 27: 
            { return yytoken(FIELD);
            } 
            // fall through
          case 72: break;
          case 28: 
            { return yytoken(PUBLIC);
            } 
            // fall through
          case 73: break;
          case 29: 
            { return yytoken(STRICT);
            } 
            // fall through
          case 74: break;
          case 30: 
            { return yytoken(STATIC);
            } 
            // fall through
          case 75: break;
          case 31: 
            { return yytoken(BRIDGE);
            } 
            // fall through
          case 76: break;
          case 32: 
            { return yytoken(NATIVE);
            } 
            // fall through
          case 77: break;
          case 33: 
            { return yytoken(IMPORT);
            } 
            // fall through
          case 78: break;
          case 34: 
            { return yytoken(METHOD);
            } 
            // fall through
          case 79: break;
          case 35: 
            { return yytoken(PRIVATE);
            } 
            // fall through
          case 80: break;
          case 36: 
            { return yytoken(VARARGS);
            } 
            // fall through
          case 81: break;
          case 37: 
            { return yytoken(MANDATED);
            } 
            // fall through
          case 82: break;
          case 38: 
            { return yytoken(ABSTRACT);
            } 
            // fall through
          case 83: break;
          case 39: 
            { return yytoken(VOLATILE);
            } 
            // fall through
          case 84: break;
          case 40: 
            { return yytoken(INTERFACE);
            } 
            // fall through
          case 85: break;
          case 41: 
            { return yytoken(PROTECTED);
            } 
            // fall through
          case 86: break;
          case 42: 
            { return yytoken(TRANSIENT);
            } 
            // fall through
          case 87: break;
          case 43: 
            { return yytoken(SYNTHETIC);
            } 
            // fall through
          case 88: break;
          case 44: 
            { return yytoken(ANNOTATION);
            } 
            // fall through
          case 89: break;
          case 45: 
            { return yytoken(SYNCHRONIZED);
            } 
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
